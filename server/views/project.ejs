<!-- project.ejs -->
<%- include('partials/header') %>

<!-- Ensure Axios is included -->
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<div class="d-flex">
  <%- include('partials/sidebar') %>
  <main class="flex-grow-1 p-4">
    <div class="task-list">
      <div
        class="task-header d-flex justify-content-between align-items-center mb-4"
      >
        <h1 class="task-title"><%= project.name %> - Seznam nalog</h1>
        <button class="btn btn-primary" onclick="toggleForm()">
          <i class="bi bi-plus"></i>
          Nova naloga
        </button>
      </div>

      <div id="taskForm" class="task-form card p-4 mb-4" style="display: none">
        <input type="hidden" id="taskId" />
        <!-- Hidden input for task ID -->
        <div class="form-group mb-3">
          <label for="taskName" class="form-label">Naslov naloge</label>
          <input
            type="text"
            id="taskName"
            class="form-control"
            placeholder="Vnesite naslov naloge"
          />
        </div>
        <div class="form-group mb-3">
          <label for="taskDate" class="form-label">Rok</label>
          <input type="date" id="taskDate" class="form-control" />
        </div>
        <div class="form-group mb-3">
          <label for="taskPriority" class="form-label">Prioriteta</label>
          <select id="taskPriority" class="form-control">
            <option value="low">Nizka</option>
            <option value="medium">Srednja</option>
            <option value="high">Visoka</option>
          </select>
        </div>
        <div class="form-buttons d-flex justify-content-end">
          <button class="btn btn-primary me-2" onclick="saveTask()">
            Shrani
          </button>
          <button class="btn btn-secondary" onclick="toggleForm()">
            Prekliči
          </button>
        </div>
      </div>

      <div id="taskList" class="row">
        <!-- Tasks rendered here -->
      </div>
    </div>
  </main>
</div>

<script>
  axios.defaults.withCredentials = true;

  // Use both 'project.id' and 'project._id' with a fallback
  const projectId = "<%= project.id || project._id %>";
  const taskBaseUrl = `/api/tasks?project=${projectId}`; // Use relative URL

  function toggleForm() {
    const form = document.getElementById("taskForm");
    form.style.display = form.style.display === "none" ? "block" : "none";
  }

  async function loadTasks() {
    console.log("Loading tasks for project:", projectId);
    try {
      const response = await axios.get(taskBaseUrl);
      const tasks = response.data;

      console.log("Tasks loaded:", tasks);

      const taskList = document.getElementById("taskList");
      taskList.innerHTML = "";

      if (tasks.length === 0) {
        taskList.innerHTML = `
          <div class="col-12">
            <div class="alert alert-info text-center" role="alert">
              Ni nalog za prikaz.
            </div>
          </div>
        `;
        return;
      }

      tasks.forEach((task, index) => {
        console.log(`Task ${index + 1} ID:`, task.id);
        console.log(`Task ${index + 1} _id:`, task._id);

        // Use 'id' if available; otherwise, fallback to '_id'
        const taskId = task.id || task._id;

        const dueDate = new Date(task.dueDate);
        const now = new Date();
        const isOverdue = dueDate < now && task.status !== "completed";
        const formattedDueDate = dueDate.toLocaleDateString("sl-SI", {
          year: "numeric",
          month: "long",
          day: "numeric",
        });
        const translatedPriority =
          { low: "Nizka", medium: "Srednja", high: "Visoka" }[task.priority] ||
          task.priority;

        const taskItem = document.createElement("div");
        taskItem.className = "col-12 mb-3";
        taskItem.innerHTML = `
          <div class="card h-100 shadow-sm">
            <div class="card-body d-flex justify-content-between align-items-center">
              <div class="task-content d-flex align-items-center">
                <label class="custom-checkbox me-3">
                  <input type="checkbox" ${
                    task.status === "completed" ? "checked" : ""
                  } onclick="toggleTaskStatus('${taskId}', this.checked)">
                  <i class="bi bi-check"></i>
                </label>
                <div class="task-details">
                  ${
                    isOverdue
                      ? `<div style="color: red; font-weight: bold;">🚨 Zamujeno!</div>`
                      : ""
                  }
                  ${
                    task.warning
                      ? `<div style="color: orange;">⚠️ Naloga kmalu poteče!</div>`
                      : ""
                  }
                  <div class="task-name">${task.title}</div>
                  <div class="task-meta">
                    Rok: ${formattedDueDate} | Prioriteta: ${translatedPriority}
                  </div>
                </div>
              </div>
              <div class="task-actions">
                <button class="btn btn-icon me-2" onclick="populateEditForm('${taskId}')">
                  <i class="bi bi-pencil-square"></i>
                </button>
                <button class="btn btn-icon" onclick="deleteTask('${taskId}')">
                  <i class="bi bi-trash"></i>
                </button>
              </div>
            </div>
          </div>
        `;
        taskList.appendChild(taskItem);
      });
    } catch (error) {
      console.error(
        "Failed to load tasks:",
        error.response?.data || error.message
      );
      const taskList = document.getElementById("taskList");
      taskList.innerHTML = `
        <div class="col-12">
          <div class="alert alert-danger text-center" role="alert">
            Pri nalaganju nalog je prišlo do napake.
          </div>
        </div>
      `;
    }
  }

  async function toggleTaskStatus(taskId, isChecked) {
    try {
      const status = isChecked ? "completed" : "pending";
      await axios.put(`/api/tasks/${taskId}`, {
        status,
      });
      loadTasks();
    } catch (error) {
      console.error(
        "Failed to update task status:",
        error.response?.data || error.message
      );
    }
  }

  async function populateEditForm(taskId) {
    try {
      const response = await axios.get(`/api/tasks/${taskId}`);
      const task = response.data;

      document.getElementById("taskId").value = task.id || task._id;
      document.getElementById("taskName").value = task.title;
      document.getElementById("taskDate").value = task.dueDate.split("T")[0];
      document.getElementById("taskPriority").value = task.priority;

      toggleForm();
    } catch (error) {
      console.error(
        "Failed to populate edit form:",
        error.response?.data || error.message
      );
      alert("Pri pridobivanju podatkov naloge je prišlo do napake.");
    }
  }

  async function saveTask() {
    const taskId = document.getElementById("taskId").value;
    const taskName = document.getElementById("taskName").value.trim();
    const taskDate = document.getElementById("taskDate").value;
    const taskPriority = document.getElementById("taskPriority").value;

    if (!taskName) {
      alert("Prosimo, vnesite naslov naloge.");
      return;
    }

    const taskData = {
      title: taskName,
      dueDate: taskDate,
      priority: taskPriority,
      status: "pending",
      project: projectId, // Associate task with the current project
    };

    try {
      if (taskId) {
        await axios.put(`/api/tasks/${taskId}`, taskData);
      } else {
        const response = await axios.post("/api/tasks", taskData);
        const newTaskId = response.data.id || response.data._id;
        // Optionally, add the task to the project
        await axios.post("/api/projects/add-task", {
          projectId,
          taskId: newTaskId,
        });
      }

      toggleForm();
      loadTasks();
    } catch (error) {
      console.error(
        "Failed to save task:",
        error.response?.data || error.message
      );
      //alert("Pri shranjevanju naloge je prišlo do napake.");
    }
  }

  async function deleteTask(taskId) {
    if (!confirm("Ste prepričani, da želite izbrisati to nalogo?")) {
      return;
    }
    try {
      await axios.delete(`/api/tasks/${taskId}`);
      loadTasks();
    } catch (error) {
      console.error(
        "Failed to delete task:",
        error.response?.data || error.message
      );
      alert("Pri brisanju naloge je prišlo do napake.");
    }
  }

  loadTasks();
</script>

<%- include('partials/footer') %>
