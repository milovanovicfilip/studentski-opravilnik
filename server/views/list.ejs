<%- include('partials/header') %>

    <div class="d-flex">
        <%- include('partials/sidebar') %>
            <main>
                <div class="task-list">
                    <div class="task-header">
                        <h1 class="task-title">Seznam nalog</h1>
                        <button class="btn btn-primary" onclick="toggleForm()">
                            <i class="bi bi-plus"></i>
                            Nova naloga
                        </button>
                    </div>

                    <div id="taskForm" class="task-form" style="display: none;">
                        <input type="hidden" id="taskId"> <!-- Hidden input for task ID -->
                        <div class="form-group">
                            <label for="taskName">Naslov naloge</label>
                            <input type="text" id="taskName" class="form-control" placeholder="Vnesite naslov naloge">
                        </div>
                        <div class="form-group">
                            <label for="taskDate">Rok</label>
                            <input type="date" id="taskDate" class="form-control">
                        </div>
                        <div class="form-group">
                            <label for="taskPriority">Prioriteta</label>
                            <select id="taskPriority" class="form-control">
                                <option value="low">Nizka</option>
                                <option value="medium">Srednja</option>
                                <option value="high">Visoka</option>
                            </select>
                        </div>
                        <div class="form-buttons">
                            <button class="btn btn-primary" onclick="saveTask()">Shrani</button>
                            <button class="btn btn-icon" onclick="toggleForm()">Prekliči</button>
                        </div>
                    </div>

                    <div id="taskList">
                        <!-- Tasks rendered here -->
                    </div>
                </div>

                <script>
                    const baseUrl = "http://localhost:4000/api/tasks";

                    function toggleForm() {
                        const form = document.getElementById('taskForm');
                        form.style.display = form.style.display === 'none' ? 'block' : 'none';
                    }

                    async function loadTasks() {
                        try {
                            const response = await axios.get(baseUrl);
                            const tasks = response.data;

                            const taskList = document.getElementById("taskList");
                            taskList.innerHTML = "";

                            tasks.forEach(task => {
                                const taskItem = document.createElement("div");
                                taskItem.className = "task-item";
                                taskItem.innerHTML = `
                                <div class="task-content">
                                    <label class="custom-checkbox">
                                        <input type="checkbox" ${task.status === "completed" ? "checked" : ""}>
                                        <i class="bi bi-check"></i>
                                    </label>
                                    <div class="task-details">
                                        <div class="task-name">${task.title}</div>
                                        <div class="task-meta">
                                            Rok: ${new Date(task.dueDate).toLocaleDateString("sl-SI", { year: "numeric", month: "long", day: "numeric" })}
                                            ${new Date(task.dueDate) < new Date() && task.status !== "completed"
                                        ? `<span style="color: red; font-weight: bold;">(Zamujeno!)</span>` : ""}
                                            | Prioriteta: ${{ low: "Nizka", medium: "Srednja", high: "Visoka" }[task.priority] || task.priority}
                                            ${task.warning ? `<span style="color: red;">⚠️ Naloga kmalu poteče!</span>` : ""}
                                        </div>
                                    </div>
                                </div>
                                <div class="task-actions">
                                    <button class="btn btn-icon" onclick="populateEditForm('${task._id}')">
                                        <i class="bi bi-pencil-square"></i>
                                    </button>
                                    <button class="btn btn-icon" onclick="deleteTask('${task._id}')">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            `;
                                taskList.appendChild(taskItem);
                            });
                        } catch (error) {
                            console.error("Failed to load tasks:", error.response?.data || error.message);
                        }
                    }

                    async function populateEditForm(taskId) {
                        try {
                            const response = await axios.get(`${baseUrl}/${taskId}`);
                            const task = response.data;

                            document.getElementById("taskId").value = task._id;
                            document.getElementById("taskName").value = task.title;
                            document.getElementById("taskDate").value = task.dueDate.split("T")[0];
                            document.getElementById("taskPriority").value = task.priority;

                            toggleForm();
                        } catch (error) {
                            console.error("Failed to populate edit form:", error.response?.data || error.message);
                        }
                    }

                    async function saveTask() {
                        const taskId = document.getElementById("taskId").value;
                        const taskName = document.getElementById("taskName").value;
                        const taskDate = document.getElementById("taskDate").value;
                        const taskPriority = document.getElementById("taskPriority").value;

                        const taskData = {
                            title: taskName,
                            dueDate: taskDate,
                            priority: taskPriority,
                            status: "pending",
                        };

                        try {
                            if (taskId) {
                                await axios.put(`${baseUrl}/${taskId}`, taskData);
                            } else {
                                await axios.post(baseUrl, taskData);
                            }

                            toggleForm();
                            loadTasks();
                        } catch (error) {
                            console.error("Failed to save task:", error.response?.data || error.message);
                        }
                    }

                    async function deleteTask(taskId) {
                        try {
                            await axios.delete(`${baseUrl}/${taskId}`);
                            loadTasks();
                        } catch (error) {
                            console.error("Failed to delete task:", error.response?.data || error.message);
                        }
                    }

                    loadTasks();
                </script>
            </main>
    </div>

    <%- include('partials/footer') %>